@page "/cars"
@using CarService.Domain.Enums
@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces
@using CarService.Extensions
@using CarService.Shared.Dialogs

@inject ICarService CarService
@inject IClientService ClientService
@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>Автомобили</PageTitle>

<MudPaper Class="m-2 p-3" Elevation="3">
    @if (UserService.CurrentUser is null)
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Необходимо авторизоваться!</MudAlert>
    }
    else if(UserService.CurrentUser.Role is Domain.Enums.Roles.Admin || UserService.CurrentUser.Role is Domain.Enums.Roles.Manager){
        <MudGrid>
            <MudItem><MudText Typo="Typo.h6" Class="fw-bold" Color="Color.Primary">АВТОМОБИЛИ</MudText></MudItem>
            <MudSpacer/>
            <MudTextField Adornment="Adornment.Start" IconSize="Size.Medium" AdornmentIcon="@Icons.Material.Filled.Search" T="string" Label="Поиск" @bind-Value="_searchText"></MudTextField>
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateCarDialog">
                    <MudText Typo="Typo.button" Class="fw-bold">ДОБАВИТЬ</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>  

        <MudTable T="Car" Filter="new Func<Car,bool>(SearchTextFilter)" Class="mt-5" Items="@_cars" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Владелец</MudTh>
                <MudTh>Гос - номер</MudTh>
                <MudTh>Модель</MudTh>
                <MudTh>Изменение</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Владелец">@($"{context.Client.Surname} {context.Client.Name} {context.Client.Patronymic}")</MudTd>
                <MudTd DataLabel="Гос - номер">@context.StateNumber</MudTd>
                <MudTd DataLabel="Модель">@($"{context.Model.Brand.Name} {context.Model.Name}")</MudTd>
                @{
                    var car = (Car) context;
                }
                <MudTd DataLabel="Изменение"><MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => OpenEditCarDialog(car))" Size="Size.Medium"></MudIconButton></MudTd>
            </RowTemplate>
    </MudTable>
    }
    else
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Недостаточно прав!</MudAlert>
    }
</MudPaper>

@code {
    private List<Car>? _cars;
    private string _searchText = "";
    readonly Func<Client, string?> _clientConverter = p => ($"{p?.Surname} {p?.Name} {p?.Patronymic}");

    protected async override Task OnInitializedAsync()
    {
        await FillList();
    }

    private async Task FillList()
    {
        var allCars = await CarService.GetAllCarsAsync();
        _cars = allCars.Data;
    }

    private async Task OpenCreateCarDialog()
    {
        var parameters = new DialogParameters();

        parameters.Add("IsNew", true);
        var dialog = await DialogService.ShowAsync<EditCarDialog>("Добавление автомобиля", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private async Task OpenEditCarDialog(Car car)
    {
        var parameters = new DialogParameters();

        parameters.Add("Car", car);
        var dialog = await DialogService.ShowAsync<EditCarDialog>("Изменение автомобиля", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private bool SearchTextFilter(Car car) => FilterFunc(car, _searchText);

    private bool FilterFunc(Car car, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (car.Client.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (car.Client.Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (car.StateNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (car.VinNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (car.Model.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (car.Model.Brand.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{car.Model.Brand.Name} {car.Model.Name}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{car.Client.Surname} {car.Client.Name}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}