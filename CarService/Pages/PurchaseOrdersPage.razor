@page "/purchaseOrders"
@using CarService.Domain.Enums
@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces
@using CarService.Extensions
@using CarService.Shared.Dialogs

@inject IUserService UserService
@inject IPurchaseOrderService OrderService
@inject IDialogService DialogService
@inject NavigationManager NavManager

<MudPaper Class="m-2 p-3" Elevation="3">
    @if (UserService.CurrentUser is null)
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Необходимо авторизоваться!</MudAlert>
    }
    else
    {
        @if (_loading)
        {
            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true"></MudProgressCircular>
        }
        else
        {
            <MudGrid>
                <MudItem><MudText Typo="Typo.h6" Class="fw-bold" Color="Color.Primary">ЗАКАЗЫ-НАРЯДЫ</MudText></MudItem>
                <MudSpacer/>
                @if (UserService.CurrentUser.Role == Roles.Manager || UserService.CurrentUser.Role == Roles.Admin)
                {
                     <MudItem>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateOrderlDialog">
                            <MudText Typo="Typo.button" Class="fw-bold">НОВЫЙ ЗАКАЗ</MudText>
                        </MudButton>
                    </MudItem>
                }
            </MudGrid>  

            <MudTable Class="mt-5" Items="@_orders" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<PurchaseOrderTableItem, object>(x=>x.CreatedDate)">Дата создания</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PurchaseOrderTableItem, object>(x=>x.Client)">Клиент</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PurchaseOrderTableItem, object>(x=>x.Car)">Автомобиль</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PurchaseOrderTableItem, object>(x=>x.TotalCost)">Итоговая стоимость</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PurchaseOrderTableItem, object>(x=>x.Status)">Статус</MudTableSortLabel></MudTh>
                    <MudTh>Изменение</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Дата создания">@(context.CreatedDate.ToString("D"))</MudTd>
                    <MudTd DataLabel="Клиент">@context.Client</MudTd>
                    <MudTd DataLabel="Автомобиль">@(context.Car)</MudTd>
                    <MudTd DataLabel="Итоговая стоимость">@context.TotalCost руб.</MudTd>
                    <MudTd DataLabel="Статус">@context.Status.GetDisplayName()</MudTd>
                    <MudTd DataLabel="Изменение"><MudIconButton Icon="@Icons.Filled.Edit" Size="Size.Medium" OnClick="@(() => OpenEditOrderDialog(context.PurchaseOrderId))"></MudIconButton></MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" PageSizeOptions="new int[]{10, 25, 50, 100}" HidePagination="true" InfoFormat="{first_item}-{last_item} из {all_items}" RowsPerPageString="Отображать строк:"/>
                </PagerContent>
            </MudTable>
        }     
    }
</MudPaper>

@code {
    private List<PurchaseOrderTableItem>? _orders;
    private bool _loading = true;

    protected async override Task OnInitializedAsync()
    {
        if (UserService.CurrentUser != null)
        {
             await FillList();
        }
    }

    private async Task FillList()
    {
        BaseResponse<List<PurchaseOrderTableItem>> res;

        if (UserService.CurrentUser.Role is Roles.Diagnostician)
        {
            res = await OrderService.GetPurchaseOrdersByDiagnosticianIdAsync(UserService.CurrentUser.Id);
        }
        else if (UserService.CurrentUser.Role is Roles.Mechanic)
        {
            res = await OrderService.GetPurchaseOrdersByMechanicIdAsync(UserService.CurrentUser.Id);
        }
        else
        {
            res = await OrderService.GetAllPurchaseOrdersAsync();
        }

        _orders = res.Data!;

        _loading = false;
    }

    private async Task OpenCreateOrderlDialog()
    {
        var dialog = await DialogService.ShowAsync<CreatePurchaseOrderDialog>("Новый заказ-наряд");
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private void OpenEditOrderDialog(string orderId)
    {
        NavManager.NavigateTo($"/purchaseOrder/{orderId}");
    }
}