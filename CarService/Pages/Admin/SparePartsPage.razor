@page "/spareParts"
@using CarService.Domain.Enums
@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces
@using CarService.Extensions
@using CarService.Shared.Dialogs

@inject ISparePartService SparePartService
@inject IModelService ModelService
@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>Запчасти</PageTitle>

<MudPaper Class="m-2 p-3" Elevation="3">
    @if (UserService.CurrentUser is null)
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Необходимо авторизоваться!</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem><MudText Typo="Typo.h6" Class="fw-bold" Color="Color.Primary">ЗАПЧАСТИ</MudText></MudItem>
            <MudSpacer/>
            @if (_models is not null)
            {
                 <MudItem>
                    <MudSelect T="Model" AdornmentIcon="@Icons.Filled.Search" Value="_searchModel" ValueChanged="@(ChangeSparePartsList)" Class="m-0 p-0" ToStringFunc="@_converter" Label="Модель" AnchorOrigin="Origin.BottomCenter" Clearable>
                        @foreach (Model model in _models)
                        {   
                            <MudSelectItem Value="model"/>   
                        }
                    </MudSelect>
                </MudItem>
            }

            @if (UserService.CurrentUser.Role is Roles.Manager || UserService.CurrentUser.Role is Roles.Admin)
            {
                <MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateSparePartlDialog">
                        <MudText Typo="Typo.button" Class="fw-bold">ДОБАВИТЬ</MudText>
                    </MudButton>
                </MudItem>
            }  
        </MudGrid>  

        <MudTable Class="mt-5" Items="@_spareParts" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Название</MudTh>
                <MudTh>Модель</MudTh>
                <MudTh>Стоимость</MudTh>
                <MudTh>Количество</MudTh>
                @if (UserService.CurrentUser.Role is Roles.Manager || UserService.CurrentUser.Role is Roles.Admin)
                {
                    <MudTh>Изменение</MudTh>
                }   
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Название">@context.Name</MudTd>
                <MudTd DataLabel="Модель">@(context.Model.Brand.Name + " " + context.Model.Name)</MudTd>
                <MudTd DataLabel="Стоимость">@context.Price руб.</MudTd>
                <MudTd DataLabel="Количество">@context.Count</MudTd>
                @{
                    var sparePart = (SparePart) context;
                }
                @if (UserService.CurrentUser.Role is Roles.Manager || UserService.CurrentUser.Role is Roles.Admin)
                {
                    <MudTd DataLabel="Изменение"><MudIconButton Icon="@Icons.Filled.Edit" Size="Size.Medium" OnClick="@(() => OpenEditModelDialog(sparePart))"></MudIconButton></MudTd>
                }
            </RowTemplate>
        </MudTable>
    }
</MudPaper>

@code {
    private List<SparePart>? _spareParts;
    private List<Model> _models;
    private Model _searchModel = null!;

    readonly Func<Model, string?> _converter = p => p?.Brand?.Name + " " + p?.Name;


    protected async override Task OnInitializedAsync()
    {
        var result = await ModelService.GetAllModelsAsync();

        _models = result.Data;

        await FillList();
    }

    private async Task FillList()
    {
        var allSpareParts = await SparePartService.GetAllSparePartsAsync();

        _spareParts = allSpareParts.Data;

        _searchModel = null!;
    }

    private async Task OpenCreateSparePartlDialog()
    {
        var parameters = new DialogParameters();

        parameters.Add("IsNew", true);
        var dialog = await DialogService.ShowAsync<EditSparePartDialog>("Добавление запчасти", parameters);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private async Task OpenEditModelDialog(SparePart sparePart)
    {
        var parameters = new DialogParameters();

        parameters.Add("SparePart", sparePart); 
        var dialog = await DialogService.ShowAsync<EditSparePartDialog>("Изменение запчасти", parameters);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private async void ChangeSparePartsList(Model model)
    {
        BaseResponse<List<SparePart>> allSpareParts;

        if (model == null)
        {
            allSpareParts = await SparePartService.GetAllSparePartsAsync();
        }
        else
        {
            allSpareParts = await SparePartService.GetSparePartsByModelAsync(model);
        }

        _searchModel = model;
        _spareParts = allSpareParts.Data;

        StateHasChanged();
    }
}