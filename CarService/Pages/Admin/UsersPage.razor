@page "/users"
@using CarService.Domain.Enums
@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces
@using CarService.Extensions
@using CarService.Shared.Dialogs

@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>Пользователи</PageTitle>

<MudPaper Class="m-2 p-3" Elevation="3">
    @if (UserService.CurrentUser is null)
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Необходимо авторизоваться!</MudAlert>
    }
    else if(UserService.CurrentUser.Role is Domain.Enums.Roles.Admin || UserService.CurrentUser.Role is Domain.Enums.Roles.Manager)
    {
        <MudGrid>
            <MudItem><MudText Typo="Typo.h6" Class="fw-bold" Color="Color.Primary">ПОЛЬЗОВАТЕЛИ</MudText></MudItem>
            <MudSpacer/>
            <MudTextField Class="me-3" Adornment="Adornment.Start" IconSize="Size.Medium" AdornmentIcon="@Icons.Material.Filled.Search" T="string" Label="Поиск" @bind-Value="_searchText"></MudTextField>
            @if (UserService.CurrentUser.Role is Roles.Admin)
            {
                <MudItem>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateUserDialog">
                        <MudText Typo="Typo.button" Class="fw-bold">ДОБАВИТЬ</MudText>
                    </MudButton>
                </MudItem>
            }
        </MudGrid>  

        <MudTable T="User" Filter="new Func<User,bool>(SearchTextFilter)" Class="mt-5" Items="@_users" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Фамилия</MudTh>
                <MudTh>Имя</MudTh>
                <MudTh>Роль</MudTh>
                <MudTh>Телефон</MudTh>
                @if (UserService.CurrentUser.Role is Roles.Admin)
                {
                    <MudTh>Изменение</MudTh>
                }
                else
                {
                    <MudTh>Адрес</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Фамилия">@context.Surname</MudTd>
                <MudTd DataLabel="Имя">@context.Name</MudTd>
                <MudTd DataLabel="Роль">@context.Role.GetDisplayName()</MudTd>
                <MudTd DataLabel="Телефон">@context.PhoneNumber</MudTd>
                @{
                    var user = (User) context;
                }
                @if (UserService.CurrentUser.Role is Roles.Admin)
                {
                    <MudTd DataLabel="Изменение"><MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(() => OpenEditUserDialog(user))" Size="Size.Medium"></MudIconButton></MudTd>
                }
                else
                {
                    <MudTd DataLabel="Адрес">@context.Address</MudTd>
                }
        </RowTemplate>
    </MudTable>
    }
    else
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Недостаточно прав!</MudAlert>
    }
</MudPaper>

@code {
    private List<User>? _users;
    private string _searchText = "";
    readonly Func<Roles, string?> _converter = p => p.GetDisplayName();

    protected async override Task OnInitializedAsync()
    {
        await FillList();
    }

    private async Task FillList()
    {
        var allUsers = await UserService.GetAllUsersAsync();
        _users = allUsers.Data;
    }

    private async Task OpenCreateUserDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateUserDialog>("Добавление пользователя");

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private async Task OpenEditUserDialog(User user)
    {
        var parameters = new DialogParameters();

        parameters.Add("User", user);
        var dialog = await DialogService.ShowAsync<EditUserDialog>("Изменение пользователя", parameters);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private bool SearchTextFilter(User user) => FilterFunc(user, _searchText);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{user.Surname} {user.Name} {user.Patronymic}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Role.GetDisplayName()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}