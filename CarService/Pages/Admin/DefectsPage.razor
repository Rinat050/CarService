@page "/defects"
@using CarService.Domain.Enums
@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces
@using CarService.Extensions
@using CarService.Shared.Dialogs

@inject IDefectService DefectService
@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>Неисправности</PageTitle>

<MudPaper Class="m-2 p-3" Elevation="3">
    @if (UserService.CurrentUser is null)
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Необходимо авторизоваться!</MudAlert>
    }
    else if(UserService.CurrentUser.Role is Domain.Enums.Roles.Admin){
        <MudGrid>
            <MudItem><MudText Typo="Typo.h6" Class="fw-bold" Color="Color.Primary">НЕИСПРАВНОСТИ</MudText></MudItem>
            <MudSpacer/>
            <MudTextField Adornment="Adornment.Start" IconSize="Size.Medium" AdornmentIcon="@Icons.Material.Filled.Search" T="string" Label="Поиск" @bind-Value="_searchText"></MudTextField>
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateDefectDialog">
                    <MudText Typo="Typo.button" Class="fw-bold">ДОБАВИТЬ</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>  

        <MudTable T="Defect" Filter="new Func<Defect,bool>(SearchTextFilter)" Class="mt-5" Items="@_defects" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Описание</MudTh>
                <MudTh>Изменение</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Описание">@context.Description</MudTd>
                @{
                    var defect = (Defect) context;
                }
                <MudTd DataLabel="Изменение"><MudIconButton Icon="@Icons.Filled.Edit" Size="Size.Medium" OnClick="@(() => OpenEditDefectDialog(defect))"></MudIconButton></MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Недостаточно прав!</MudAlert>
    }
</MudPaper>

@code {
    private List<Defect>? _defects;
    private string _searchText = "";

    protected async override Task OnInitializedAsync()
    {
        await FillList();
    }

    private async Task FillList()
    {
        var allDefects = await DefectService.GetAllDefectsAsync();

        _defects = allDefects.Data;
    }

    private async Task OpenCreateDefectDialog()
    {
        var parameters = new DialogParameters();

        parameters.Add("IsNew", true);
        var dialog = await DialogService.ShowAsync<EditDefectDialog>("Добавление неисправности", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private async Task OpenEditDefectDialog(Defect defect)
    {
        var parameters = new DialogParameters();

        parameters.Add("Defect", defect); 
        var dialog = await DialogService.ShowAsync<EditDefectDialog>("Изменение неисправности", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private bool SearchTextFilter(Defect defect) => FilterFunc(defect, _searchText);

    private bool FilterFunc(Defect defect, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (defect.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
