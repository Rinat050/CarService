@page "/repairs"
@using CarService.Domain.Enums
@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces
@using CarService.Extensions
@using CarService.Shared.Dialogs

@inject IRepairService RepairService
@inject IUserService UserService
@inject IDialogService DialogService

<PageTitle>Ремонтные работы</PageTitle>

<MudPaper Class="m-2 p-3" Elevation="3">
    @if (UserService.CurrentUser is null)
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Необходимо авторизоваться!</MudAlert>
    }
    else if(UserService.CurrentUser.Role is Domain.Enums.Roles.Admin){
        <MudGrid>
            <MudItem><MudText Typo="Typo.h6" Class="fw-bold" Color="Color.Primary">РЕМОНТНЫЕ РАБОТЫ</MudText></MudItem>
            <MudSpacer/>
            <MudTextField Adornment="Adornment.Start" IconSize="Size.Medium" AdornmentIcon="@Icons.Material.Filled.Search" T="string" Label="Поиск" @bind-Value="_searchText"></MudTextField>
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OpenCreateRepairDialog">
                    <MudText Typo="Typo.button" Class="fw-bold">ДОБАВИТЬ</MudText>
                </MudButton>
            </MudItem>
        </MudGrid>  

        <MudTable T="Repair" Filter="new Func<Repair,bool>(SearchTextFilter)" Class="mt-5" Items="@_repairs" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Описание</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Repair, object>(x=>x.Cost)">Стоимость</MudTableSortLabel></MudTh>
                <MudTh>Изменение</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Описание">@context.Description</MudTd>
                <MudTd DataLabel="Стоимость">@context.Cost руб.</MudTd>
                @{
                    var repair = (Repair) context;
                }
                <MudTd DataLabel="Изменение"><MudIconButton Icon="@Icons.Filled.Edit" Size="Size.Medium" OnClick="@(() => OpenEditRepairDialog(repair))"></MudIconButton></MudTd>
            </RowTemplate>
    </MudTable>
    }
    else
    {
        <MudAlert Variant="Variant.Outlined" ContentAlignment="HorizontalAlignment.Center" Severity="Severity.Warning">Недостаточно прав!</MudAlert>
    }
</MudPaper>

@code {
    private List<Repair>? _repairs;
    private string _searchText = "";

    protected async override Task OnInitializedAsync()
    {
        await FillList();
    }

    private async Task FillList()
    {
        var allRepairs = await RepairService.GetAllRepairsAsync();

        _repairs = allRepairs.Data;
    }

    private async Task OpenCreateRepairDialog()
    {
        var parameters = new DialogParameters();

        parameters.Add("IsNew", true);
        var dialog = await DialogService.ShowAsync<EditRepairDialog>("Добавление ремонтной работы", parameters);
        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private async Task OpenEditRepairDialog(Repair repair)
    {
        var parameters = new DialogParameters();

        parameters.Add("Repair", repair); 
        var dialog = await DialogService.ShowAsync<EditRepairDialog>("Изменение ремонтной работы", parameters);

        var res = await dialog.Result;

        if (!res.Canceled)
        {
            await FillList();
        }
    }

    private bool SearchTextFilter(Repair repair) => FilterFunc(repair, _searchText);

    private bool FilterFunc(Repair repair, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (repair.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (repair.Cost.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}