@using CarService.Domain.Models
@using CarService.Domain.Services.Interfaces
@inherits LayoutComponentBase

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudThemeProvider Theme="mainTheme"/>
<MudDialogProvider
    FullWidth="true"
    MaxWidth="MaxWidth.ExtraSmall"
    CloseButton="true"
    DisableBackdropClick="true"
    Position="DialogPosition.Center"
    CloseOnEscapeKey="true"
/>
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Secondary" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer/>
        @if (UserService.CurrentUser is not null)
        {
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" 
                    OnClick="@(() => NavigationManager.NavigateTo("/cabinet"))">
                <MudText Color="Color.Primary" Class="fw-bold" Typo="Typo.button">ЛИЧНЫЙ КАБИНЕТ</MudText>
            </MudButton>
        }   
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" ClipMode="clipMode" Breakpoint="@breakpoint" Elevation="1" Variant="@DrawerVariant.Responsive">
        @if (UserService.CurrentUser is not null)
        {
            @if (UserService.CurrentUser.Role == Domain.Enums.Roles.Admin)
            {
                <MudNavMenu>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.People" Href="/users"><MudText Color="Color.Primary">Пользователи</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.BrandingWatermark" Href="/brands"><MudText Color="Color.Primary">Бренды</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Abc" Href="/models"><MudText Color="Color.Primary">Модели</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.CarCrash" Href="/defects"><MudText Color="Color.Primary">Неисправности</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.CarRepair" Href="/repairs"><MudText Color="Color.Primary">Ремонтные работы</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Settings" Href="/spareParts"><MudText Color="Color.Primary">Запчасти</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Groups" Href="/clients"><MudText Color="Color.Primary">Клиенты</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DirectionsCar" Href="/cars"><MudText Color="Color.Primary">Автомобили</MudText></MudNavLink>
                </MudNavMenu>
            }  

            @if (UserService.CurrentUser.Role == Domain.Enums.Roles.Manager)
            {
                <MudNavMenu>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Settings" Href="/spareParts"><MudText Color="Color.Primary">Запчасти</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Groups" Href="/clients"><MudText Color="Color.Primary">Клиенты</MudText></MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DirectionsCar" Href="/cars"><MudText Color="Color.Primary">Автомобили</MudText></MudNavLink>
                </MudNavMenu>
            }
        }
    </MudDrawer>
    <MudMainContent>
        @Body  
    </MudMainContent>
</MudLayout>

@code {
    MudTheme mainTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = new MudBlazor.Utilities.MudColor("#1C49CF"),
            Secondary = new MudBlazor.Utilities.MudColor("#E7E7E7"),
            AppbarBackground = new MudBlazor.Utilities.MudColor("#1C49CF"),
            DrawerIcon = new MudBlazor.Utilities.MudColor("#1C49CF"),
            DrawerBackground = new MudBlazor.Utilities.MudColor("#E7E7E7"),
        }
    };
    bool drawerOpen = true;
    Breakpoint breakpoint = Breakpoint.Sm;
    DrawerClipMode clipMode = DrawerClipMode.Always;

    protected override async Task OnInitializedAsync()
    {
        var authUser = await LocalStorage.GetItemAsync<User>("AuthUser");

        if (authUser is not null)
        {
            var res = await UserService.GetUserByLoginAsync(authUser.Login);
            if (!res.Success)
            {
                return;
            }

            UserService.CurrentUser = res.Data!;
        }
    }

    void DrawerToggle()  
    {  
        drawerOpen = !drawerOpen; 
    }
}