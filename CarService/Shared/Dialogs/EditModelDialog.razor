@using CarService.Domain.Models
@using CarService.Domain.Response
@using CarService.Domain.Services.Interfaces

@inject IModelService ModelService
@inject IBrandService BrandService
@inject ISnackbar Snackbar

<EditForm Model="Model" OnValidSubmit="@CreateModel">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            @if (_brands is not null)
            {
                <MudTextField T="string" Label="Название" @bind-Value="Model.Name" For="@(() => Model.Name)"></MudTextField>
                <MudSelect @bind-Value="Model.Brand" For="@(() => Model.Brand)" ToStringFunc="@_converter" Label="Бренд" AnchorOrigin="Origin.BottomCenter">
                    @foreach (Brand brand in _brands)
                    {
                        <MudSelectItem Value="brand"></MudSelectItem>
                    }
                </MudSelect>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">ОТМЕНА</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">СОХРАНИТЬ</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Model Model { get; set; } 
    [Parameter] public bool IsNew { get; set; }

    private List<Brand> _brands;

    readonly Func<Brand, string?> _converter = p => p?.Name;

    private void Close() => MudDialog.Close();

    protected async override Task OnInitializedAsync()
    {
        var result = await BrandService.GetAllBrandsAsync();

        _brands = result.Data;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (IsNew)
        {
            Model = new Model();
            return;
        }

        if (Model is null)
        {
            Model = new Model();
        }
    }

    private async Task CreateModel()
    {
        BaseResponse<Model> result;

        if (IsNew)
        {
            result = await ModelService.CreateModelAsync(Model);
        }
        else
        {
            result = await ModelService.UpdateModelAsync(Model);
        }

        if (result.Success)
        {
            Snackbar.Add(result.Description, Severity.Success);
            Close();
        }
        else
        {
            Snackbar.Add(result.Description, Severity.Error);
        }
    }
}

