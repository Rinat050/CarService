@using CarService.Data
@using CarService.Domain.Models

@inject CarService.Domain.Services.Interfaces.IAuthorizationService AuthService
@inject ISnackbar Snackbar

<EditForm Model="_model" OnValidSubmit="@ChangePassword">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudTextField T="string" InputType="InputType.Password" Label="Новый пароль" @bind-Value="_model.NewPassword" For="@(() => _model.NewPassword)"></MudTextField>
            <MudTextField T="string" InputType="InputType.Password" Label="Повтор пароля" @bind-Value="_model.RepeatPassword" For="@(() => _model.RepeatPassword)"></MudTextField>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">ОТМЕНА</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">СОХРАНИТЬ</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public User User { get; set; }

    private AdminChangePasswordCredentials _model;

    protected override Task OnInitializedAsync()
    {
        _model = new AdminChangePasswordCredentials();
        return base.OnInitializedAsync();
    }

    private void Close() => MudDialog.Close();

    private async Task ChangePassword()
    {
        if (User is null)
        {
            return;
        }

        var result = await AuthService.ChangePasswordAsync(User, _model.NewPassword);

        if (result.Success)
        {
            Snackbar.Add(result.Description, Severity.Success);
            Close();
        }
        else
        {
            Snackbar.Add(result.Description, Severity.Warning);
        }
    }
}