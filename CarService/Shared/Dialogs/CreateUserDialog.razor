@using CarService.Data
@using CarService.Domain.Enums
@using CarService.Extensions

@inject CarService.Domain.Services.Interfaces.IAuthorizationService AuthService
@inject ISnackbar Snackbar

<EditForm Model="_model" OnValidSubmit="@CreateUser">
    <DataAnnotationsValidator/>
    <MudDialog>
        <DialogContent>
            <MudTextField T="string" Label="Фамилия" @bind-Value="_model.Surname" For="@(() => _model.Surname)"></MudTextField>
            <MudTextField T="string" Label="Имя" @bind-Value="_model.Name" For="@(() => _model.Name)"></MudTextField>
            <MudTextField T="string" Label="Логин" @bind-Value="_model.Login" For="@(() => _model.Login)"></MudTextField>
            <MudTextField T="string" InputType="InputType.Password" Label="Пароль" @bind-Value="_model.Password" For="@(() => _model.Password)"></MudTextField>
            <MudTextField T="string" InputType="InputType.Password" Label="Повтор пароля" @bind-Value="_model.RepeatPassword" For="@(() => _model.RepeatPassword)"></MudTextField>
            <MudSelect @bind-Value="_model.Role" ToStringFunc="@_converter" Label="Роль" AnchorOrigin="Origin.BottomCenter">
                @foreach (Roles role in Enum.GetValues(typeof(Roles)))
                {
                    <MudSelectItem Value="role"/>
                }
            </MudSelect>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">ОТМЕНА</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">СОХРАНИТЬ</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private RegisterationCredentials _model;
    readonly Func<Roles, string?> _converter = p => p.GetDisplayName();

    protected override Task OnInitializedAsync()
    {
        _model = new RegisterationCredentials();
        _model.Role = Roles.Admin;
        return base.OnInitializedAsync();
    }

    private void Close() => MudDialog.Close();

    private async Task CreateUser()
    {
        var result = await AuthService.RegisterAsync(_model.Login, _model.Password, 
                                            _model.Name, _model.Surname, _model.Role);

        if (result.Success)
        {
            Snackbar.Add(result.Description, Severity.Success);
            Close();
        }
        else
        {
            Snackbar.Add(result.Description, Severity.Error);
        }
    }
}
